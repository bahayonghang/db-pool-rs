[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "db-pool-rs"
version = "0.1.0"
description = "高性能异步数据库连接池框架，基于 Rust 实现"
authors = [
    { name = "Your Name", email = "bahayonghang@gmail.com" },
]
license = { text = "MIT" }
readme = "README.md"
keywords = ["database", "pool", "async", "rust", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8, <3.13"
dependencies = [
    "polars>=0.20.0",
    "typing-extensions>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/db-pool-rs"
Documentation = "https://db-pool-rs.readthedocs.io"
Repository = "https://github.com/yourusername/db-pool-rs"
"Bug Tracker" = "https://github.com/yourusername/db-pool-rs/issues"

[project.optional-dependencies]
# 数据库特定依赖
mssql = []  # Rust 端已包含 tiberius
postgresql = []  # Rust 端已包含 tokio-postgres
redis = []  # Rust 端已包含 redis
sqlite = []  # Rust 端已包含 rusqlite
influxdb = []  # 未来支持

# 功能组合
all-databases = ["db-pool-rs[mssql,postgresql,redis,sqlite]"]
monitoring = ["prometheus-client>=0.17.0", "opentelemetry-api>=1.15.0"]
full = ["db-pool-rs[all-databases,monitoring]"]

# 开发和测试依赖
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# 示例和基准测试
examples = [
    "asyncio-mqtt>=0.13.0",  # 用于示例
    "click>=8.0.0",  # CLI 工具
    "rich>=13.0.0",  # 美化输出
]

[tool.maturin]
features = ["pyo3/extension-module", "mssql"]  # 默认包含 MSSQL 支持
module-name = "db_pool_rs._db_pool_rs"
python-source = "python"
strip = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests", "python/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests",
]
asyncio_mode = "auto"

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.mypy]
python_version = "3.8"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = ["polars.*", "tiberius.*"]
ignore_missing_imports = true

[tool.coverage.run]
source = ["python/db_pool_rs"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]